1. The purpose of my application is to provide a place for people to keep track of their speedrun times for minecraft speedruns, and see how their times compare to other peoples' times
2. I am using react for most of my client code. I have a component for the run submission form, a component to display the most recently submitted run, a component to display game stats, a component to display the leaderboard, and a component for ads for my profit model
3. I am storing account information (username => string, hashed password => string, created date => timestamp, is admin => boolean) and run information (user => string ref to account, time => combines a number for each of hours, minutes, seconds, & milliseconds, category => enum, version => enum, difficulty => enum)
4. I was able to get all my functionality done with not too much difficulty, and development went pretty smoothly overall
5. I was overloaded with work from all my classes over the past 2 weeks, and didnt have much time to work on this, leading to me needing to cram all the work during the last few days. I was luckily able to spend pretty much all day for 3 days straight on this, but they were all long days (8 hrs Sat, 8 hrs Sun, 16 hrs Tues)
6. I learned that time management is very important, but i also learned that time management is hard to do when you have 6 classes and 5 of them give large projects all due at the same time
7. If i were to continue, I would want to further improve the stylesheet, add category filters so that the leaderboard only displays records from a particular category, and also split the information about a run into more distinctions, as well as adding more information to the board
8. No
9. No.

Endpoint documentation

/getRuns
Supported Methods: GET
Middleware: requires login
Query params: whether to include unverified runs in the listing, and the category
Description: retreives a list of submitted runs for the specified category
Return Type: json

/getPersonalRuns
Supported methods: GET
Middleware: requires login
Query params: the currently signed in user
Description: retreives a list of runs that the current user has submitted
Return type: json

/addRun
Supported method: post
middleware: requires login
query params: time, category, version, difficulty
description: creates a new entry in the database with a new run

/getRecentRuns
Supported Methods: post
middleware: requires login
query params: none
description: retreives the most recently submitted run

/getNumUsers
supported methods: GET
middleware: requires login
query params: none
description: gets the total number of users that exist in the database
return: json

/getNumSubmissions
supported methods: get
middleware: requires login
query params: none
description: retreives the total number of submissions saved in the database
return: json

/leaderboard
supported methods: GET
middleware: requires login
query params: none
description: retreives the leaderboard page
return: html

/signup
supported methods: post
middleware: requires secure, logout
query params: username, password, isAdmin
description: creates a new user

/login
supported methods: get, post
middleware: requires secure, logout
query params: get => none, post => username, password
description: get => retreives the login page, post => authenticates the user and signs them in

/changePass
supported methods: post
middleware: requires secure, logout
query params: username, new password
description: changes the password for a particular user
