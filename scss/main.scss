/*This file is written with "Sass", a superset language of css
  that adds / extends the base css functionality. It will not
  run in the browser, so it will need to be compiled to raw css.
  That means sass cannot do *more* than css, but it does make it
  easier to write css with sass.
  https://sass-lang.com/

  This scss file serves as our main scss entry point. Similar
  to how webpack can compile our client side javascript into a
  single file, dart-sass can compile our scss into a single file
  (or multiple files if configured).
*/

/*One nice feature of sass is the ability to import other files
  similar to how we would import javascript modules. Although we
  cannot reference variables defined in other files, we can use
  the @use syntax to combine multiple css files together into one
  bundle. In this case, we are importing the contents of other.scss
  into this file.
*/
@use 'other';
@use 'minecraft';

/*With sass we can also define variables like the two below. We can
  then use these variables in place of where we might use their values.
  For example, anywhere that I want to set the color of an element,
  I can instead set it to $contrastColor. When this is compiled into
  pure css, it will simply replace $contrastColor everywhere in the
  code with the color cornflowerblue. This can make it very easy for
  me to replace the color throughout a massive stylesheet with only one
  change.
*/
$contrastColor: cornflowerblue;
$appWidth: 200px;

/*Sass also lets us define functions. These functions can be helpful for
  precomputing values as we compile our sass to css. Because pure css
  cannot execute functions like javascript can, the functions in sass
  will be evaluated to static values at compile time.
*/
@function calcDivMargin($width) {
  @return calc($width / 4);
}

html,
body {
  height: 100%;
  width: 100%;
  margin: 0;
  padding: 0;
}

/*Another thing sass lets us do is nest elements to better organize
  our css code. For example, below we have the #app id. Then nested
  inside we have a div. The css contained within would be equivalent
  to if we defined #app div {} in regular css. In /hosted/main.css you
  can see what this all compiles to.
*/
#app {
  width: 50%;
  margin: 0 auto;
  text-align: center;

  div {
    margin-top: calcDivMargin($appWidth);

    h1 {
      color: $contrastColor;
    }

    h2 i {
      color: $contrastColor;
    }

    ul {
      width: $appWidth;
      margin: 0 auto;
      text-align: left;

      li {
        margin-top: 10px;
        word-break: break-all;
        font-size: 1.1em;
      }
    }
  }
}
